// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modules.Orders.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Modules.Orders.Infrastructure.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    [Migration("20250416121507_removedColor")]
    partial class removedColor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("orders")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Banner", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.HasKey("Title")
                        .HasName("pk_banner");

                    b.ToTable("banner", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Brand", b =>
                {
                    b.Property<string>("BrandName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand_name");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Featured")
                        .HasColumnType("boolean")
                        .HasColumnName("featured");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.HasKey("BrandName")
                        .HasName("pk_brand");

                    b.ToTable("brand", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Category", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.Property<string>("CategoryPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_path");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("ParentCategoryName")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("parent_category_name");

                    b.HasKey("CategoryName")
                        .HasName("pk_category");

                    b.HasIndex("ParentCategoryName")
                        .HasDatabaseName("ix_category_parent_category_name");

                    b.ToTable("category", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpecification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_category_specification");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("ix_category_specification_category_name");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_category_specification_name");

                    b.ToTable("category_specification", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpecificationOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategorySpecificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_specification_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_category_specification_option");

                    b.HasIndex("CategorySpecificationId")
                        .HasDatabaseName("ix_category_specification_option_category_specification_id");

                    b.ToTable("category_specification_option", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Color", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("pk_color");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_color_name");

                    b.ToTable("color", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<float?>("Precentage")
                        .HasColumnType("real")
                        .HasColumnName("precentage");

                    b.Property<float?>("Value")
                        .HasColumnType("real")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_discount");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("ix_discount_expiry_date");

                    b.ToTable("discount", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand_name");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("l_description");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid")
                        .HasColumnName("vendor_id");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.HasIndex("BrandName")
                        .HasDatabaseName("ix_product_brand_name");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("ix_product_category_name");

                    b.HasIndex("Price")
                        .HasDatabaseName("ix_product_price");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ix_product_vendor_id");

                    b.ToTable("product", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_product_category");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("ix_product_category_category_name");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_category_product_id");

                    b.ToTable("product_category", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid")
                        .HasColumnName("discount_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<float>("SalePrice")
                        .HasColumnType("real")
                        .HasColumnName("sale_price");

                    b.HasKey("Id")
                        .HasName("pk_product_discount");

                    b.HasIndex("DiscountId")
                        .HasDatabaseName("ix_product_discount_discount_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_discount_product_id");

                    b.ToTable("product_discount", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_in_stock");

                    b.Property<string>("StockKeepingUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stock_keeping_unit");

                    b.HasKey("Id")
                        .HasName("pk_product_item");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_item_product_id");

                    b.ToTable("product_item", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptions", b =>
                {
                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_item_id");

                    b.Property<Guid>("CategorySpecificationOptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_specification_option_id");

                    b.HasKey("ProductItemId", "CategorySpecificationOptionId")
                        .HasName("pk_product_item_options");

                    b.HasIndex("CategorySpecificationOptionId")
                        .HasDatabaseName("ix_product_item_options_category_specification_option_id");

                    b.ToTable("product_item_options", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("ShipingZoneName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shiping_zone_name");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vendor_name");

                    b.HasKey("Id")
                        .HasName("pk_vendor");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_vendor_email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_vendor_phone_number");

                    b.HasIndex("VendorName")
                        .HasDatabaseName("ix_vendor_vendor_name");

                    b.ToTable("vendor", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Category", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Category", "ParentCategory")
                        .WithMany("ChilrenCategories")
                        .HasForeignKey("ParentCategoryName")
                        .HasConstraintName("fk_category_category_parent_category_name");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpecification", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Category", "Category")
                        .WithMany("Specifications")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_specification_category_category_name");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpecificationOption", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.CategorySpecification", "categorySpecification")
                        .WithMany("CategorySpecificationOptions")
                        .HasForeignKey("CategorySpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_specification_option_category_specification_catego");

                    b.Navigation("categorySpecification");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Product", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_brand_brand_name");

                    b.HasOne("Modules.Orders.Domain.Entities.Category", "MainCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_category_category_name");

                    b.HasOne("Modules.Orders.Domain.Entities.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_vendor_vendor_id");

                    b.Navigation("Brand");

                    b.Navigation("MainCategory");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_category_category_category_name");

                    b.HasOne("Modules.Orders.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_category_product_product_id");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductDiscount", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Discount", "Discount")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_discount_discount_discount_id");

                    b.HasOne("Modules.Orders.Domain.Entities.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_discount_product_product_id");

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptions", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.CategorySpecificationOption", "CategorySpecificationOptions")
                        .WithMany("ProductItemOptions")
                        .HasForeignKey("CategorySpecificationOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_options_category_specification_option_category");

                    b.HasOne("Modules.Orders.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("ProductItemOptions")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_options_product_item_product_item_id");

                    b.Navigation("CategorySpecificationOptions");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Category", b =>
                {
                    b.Navigation("ChilrenCategories");

                    b.Navigation("ProductCategories");

                    b.Navigation("Products");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpecification", b =>
                {
                    b.Navigation("CategorySpecificationOptions");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpecificationOption", b =>
                {
                    b.Navigation("ProductItemOptions");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Discount", b =>
                {
                    b.Navigation("ProductDiscounts");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItem", b =>
                {
                    b.Navigation("ProductItemOptions");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}

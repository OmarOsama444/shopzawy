// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modules.Orders.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Modules.Orders.Infrastructure.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    partial class OrdersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("orders")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_banner");

                    b.HasIndex("Active")
                        .HasDatabaseName("ix_banner_active");

                    b.ToTable("banner", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Brand", b =>
                {
                    b.Property<string>("BrandName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand_name");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Featured")
                        .HasColumnType("boolean")
                        .HasColumnName("featured");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.HasKey("BrandName")
                        .HasName("pk_brand");

                    b.ToTable("brand", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_category_id");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.HasIndex("Order")
                        .IsUnique()
                        .HasDatabaseName("ix_category_order");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("ix_category_parent_category_id");

                    b.ToTable("category", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpec", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("SpecId")
                        .HasColumnType("uuid")
                        .HasColumnName("spec_id");

                    b.HasKey("Id")
                        .HasName("pk_category_spec");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_category_spec_category_id");

                    b.HasIndex("SpecId")
                        .HasDatabaseName("ix_category_spec_spec_id");

                    b.ToTable("category_spec", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("LangCode")
                        .HasColumnType("integer")
                        .HasColumnName("lang_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_category_translation");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_category_translation_name");

                    b.HasIndex("CategoryId", "LangCode")
                        .IsUnique()
                        .HasDatabaseName("ix_category_translation_category_id_lang_code");

                    b.ToTable("category_translation", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Color", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("pk_color");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_color_name");

                    b.ToTable("color", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand_name");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<float>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height");

                    b.Property<float>("Length")
                        .HasColumnType("real")
                        .HasColumnName("length");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("long_description");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Tags");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid")
                        .HasColumnName("vendor_id");

                    b.Property<float>("Width")
                        .HasColumnType("real")
                        .HasColumnName("width");

                    b.Property<int>("dimensionUnit")
                        .HasColumnType("integer")
                        .HasColumnName("dimension_unit");

                    b.Property<float>("weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.Property<int>("weightUnit")
                        .HasColumnType("integer")
                        .HasColumnName("weight_unit");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.HasIndex("BrandName")
                        .HasDatabaseName("ix_product_brand_name");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_category_id");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_product_created_on");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ix_product_vendor_id");

                    b.ToTable("product", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_urls");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_in_stock");

                    b.Property<string>("StockKeepingUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stock_keeping_unit");

                    b.HasKey("Id")
                        .HasName("pk_product_item");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_product_item_created_on");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_item_product_id");

                    b.HasIndex("StockKeepingUnit")
                        .HasDatabaseName("ix_product_item_stock_keeping_unit");

                    b.ToTable("product_item", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptions", b =>
                {
                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_item_id");

                    b.Property<Guid>("CategorySpecificationOptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_specification_option_id");

                    b.HasKey("ProductItemId", "CategorySpecificationOptionId")
                        .HasName("pk_product_item_options");

                    b.HasIndex("CategorySpecificationOptionId")
                        .HasDatabaseName("ix_product_item_options_category_specification_option_id");

                    b.ToTable("product_item_options", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Specification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_type");

                    b.HasKey("Id")
                        .HasName("pk_specification");

                    b.ToTable("specification", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("boolean")
                        .HasColumnName("bool_value");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_type");

                    b.Property<double?>("NumberValue")
                        .HasColumnType("double precision")
                        .HasColumnName("number_value");

                    b.Property<Guid>("SpecificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specification_id");

                    b.Property<string>("StringValue")
                        .HasColumnType("text")
                        .HasColumnName("string_value");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_specification_option");

                    b.HasIndex("SpecificationId")
                        .HasDatabaseName("ix_specification_option_specification_id");

                    b.ToTable("specification_option", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("LangCode")
                        .HasColumnType("integer")
                        .HasColumnName("lang_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("SpecId")
                        .HasColumnType("uuid")
                        .HasColumnName("spec_id");

                    b.HasKey("Id")
                        .HasName("pk_specification_translation");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_specification_translation_name");

                    b.HasIndex("SpecId", "LangCode")
                        .IsUnique()
                        .HasDatabaseName("ix_specification_translation_spec_id_lang_code");

                    b.ToTable("specification_translation", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("ShipingZoneName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shiping_zone_name");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vendor_name");

                    b.HasKey("Id")
                        .HasName("pk_vendor");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_vendor_email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_vendor_phone_number");

                    b.HasIndex("VendorName")
                        .HasDatabaseName("ix_vendor_vendor_name");

                    b.ToTable("vendor", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Category", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Category", "ParentCategory")
                        .WithMany("ChilrenCategories")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("fk_category_category_parent_category_id");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpec", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Category", "Category")
                        .WithMany("CategorySpecs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_spec_category_category_id");

                    b.HasOne("Modules.Orders.Domain.Entities.Specification", "Specification")
                        .WithMany("CategorySpecs")
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_spec_specification_spec_id");

                    b.Navigation("Category");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_translation_category_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Product", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_brand_brand_name");

                    b.HasOne("Modules.Orders.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_category_category_id");

                    b.HasOne("Modules.Orders.Domain.Entities.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_vendor_vendor_id");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptions", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.SpecificationOption", "SpecificationOptions")
                        .WithMany("ProductItemOptions")
                        .HasForeignKey("CategorySpecificationOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_options_specification_option_category_specific");

                    b.HasOne("Modules.Orders.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("ProductItemOptions")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_options_product_item_product_item_id");

                    b.Navigation("ProductItem");

                    b.Navigation("SpecificationOptions");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationOption", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Specification", "Specification")
                        .WithMany("SpecificationOptions")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specification_option_specification_specification_id");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationTranslation", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Specification", "specification")
                        .WithMany("Translations")
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specification_translation_specification_spec_id");

                    b.Navigation("specification");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Category", b =>
                {
                    b.Navigation("CategorySpecs");

                    b.Navigation("CategoryTranslations");

                    b.Navigation("ChilrenCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItem", b =>
                {
                    b.Navigation("ProductItemOptions");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Specification", b =>
                {
                    b.Navigation("CategorySpecs");

                    b.Navigation("SpecificationOptions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationOption", b =>
                {
                    b.Navigation("ProductItemOptions");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}

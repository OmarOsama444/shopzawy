// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modules.Orders.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Modules.Orders.Infrastructure.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    [Migration("20250629225546_SpecVariationsAdded")]
    partial class SpecVariationsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("orders")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Infrastructure.Inbox.InboxConsumerMessage", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HandlerName")
                        .HasColumnType("text")
                        .HasColumnName("handler_name");

                    b.HasKey("id", "HandlerName")
                        .HasName("pk_inbox_consumer_message");

                    b.ToTable("inbox_consumer_message", "orders");
                });

            modelBuilder.Entity("Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "orders");
                });

            modelBuilder.Entity("Common.Infrastructure.Outbox.OutboxConsumerMessage", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HandlerName")
                        .HasColumnType("text")
                        .HasColumnName("handler_name");

                    b.HasKey("id", "HandlerName")
                        .HasName("pk_outbox_consumer_message");

                    b.ToTable("outbox_consumer_message", "orders");
                });

            modelBuilder.Entity("Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_banner");

                    b.HasIndex("Active")
                        .HasDatabaseName("ix_banner_active");

                    b.ToTable("banner", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("Featured")
                        .HasColumnType("boolean")
                        .HasColumnName("featured");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.HasKey("Id")
                        .HasName("pk_brand");

                    b.ToTable("brand", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.BrandTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("LangCode")
                        .HasColumnType("integer")
                        .HasColumnName("lang_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_brand_translation");

                    b.HasIndex("BrandId", "LangCode")
                        .IsUnique()
                        .HasDatabaseName("ix_brand_translation_brand_id_lang_code");

                    b.ToTable("brand_translation", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_category_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("path");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("ix_category_parent_category_id");

                    b.ToTable("category", "orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Order = 2147483647,
                            Path = "[]"
                        });
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpec", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("SpecId")
                        .HasColumnType("uuid")
                        .HasColumnName("spec_id");

                    b.HasKey("Id")
                        .HasName("pk_category_spec");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_category_spec_category_id");

                    b.HasIndex("SpecId")
                        .HasDatabaseName("ix_category_spec_spec_id");

                    b.ToTable("category_spec", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<int>("LangCode")
                        .HasColumnType("integer")
                        .HasColumnName("lang_code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId", "LangCode")
                        .HasName("pk_category_translation");

                    b.HasIndex("CategoryId", "LangCode")
                        .IsUnique()
                        .HasDatabaseName("ix_category_translation_category_id_lang_code");

                    b.ToTable("category_translation", "orders");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            LangCode = 1,
                            Description = "",
                            ImageUrl = "",
                            Name = ""
                        });
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Color", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("pk_color");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_color_name");

                    b.ToTable("color", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("DimensionUnit")
                        .HasColumnType("integer")
                        .HasColumnName("dimension_unit");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid")
                        .HasColumnName("vendor_id");

                    b.Property<int>("WeightUnit")
                        .HasColumnType("integer")
                        .HasColumnName("weight_unit");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_product_brand_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_category_id");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_product_created_on");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ix_product_vendor_id");

                    b.ToTable("product", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<float>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height");

                    b.PrimitiveCollection<List<string>>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("image_urls");

                    b.Property<float>("Length")
                        .HasColumnType("real")
                        .HasColumnName("length");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_in_stock");

                    b.Property<string>("StockKeepingUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stock_keeping_unit");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.Property<float>("Width")
                        .HasColumnType("real")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_product_item");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_product_item_created_on");

                    b.HasIndex("StockKeepingUnit")
                        .HasDatabaseName("ix_product_item_stock_keeping_unit");

                    b.HasIndex("ProductId", "StockKeepingUnit")
                        .IsUnique()
                        .HasDatabaseName("ix_product_item_product_id_stock_keeping_unit");

                    b.ToTable("product_item", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptionColor", b =>
                {
                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_item_id");

                    b.Property<Guid>("SpecificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specification_id");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text")
                        .HasColumnName("color_code");

                    b.HasKey("ProductItemId", "SpecificationId", "ColorCode")
                        .HasName("pk_product_item_option_color");

                    b.HasIndex("ColorCode")
                        .HasDatabaseName("ix_product_item_option_color_color_code");

                    b.HasIndex("SpecificationId")
                        .HasDatabaseName("ix_product_item_option_color_specification_id");

                    b.ToTable("product_item_option_color", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptionNumeric", b =>
                {
                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_item_id");

                    b.Property<Guid>("SpecificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specification_id");

                    b.Property<float>("Value")
                        .HasColumnType("real")
                        .HasColumnName("value");

                    b.HasKey("ProductItemId", "SpecificationId", "Value")
                        .HasName("pk_product_item_option_numeric");

                    b.HasIndex("SpecificationId")
                        .HasDatabaseName("ix_product_item_option_numeric_specification_id");

                    b.ToTable("product_item_option_numeric", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptions", b =>
                {
                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_item_id");

                    b.Property<Guid>("SpecificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specification_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("ProductItemId", "SpecificationId", "Value")
                        .HasName("pk_product_item_options");

                    b.HasIndex("SpecificationId", "Value")
                        .HasDatabaseName("ix_product_item_options_specification_id_value");

                    b.ToTable("product_item_options", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("LangCode")
                        .HasColumnType("integer")
                        .HasColumnName("lang_code");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("long_description");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.HasKey("Id")
                        .HasName("pk_product_translation");

                    b.HasIndex("ProductId", "LangCode")
                        .IsUnique()
                        .HasDatabaseName("ix_product_translation_product_id_lang_code");

                    b.ToTable("product_translation", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Specification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type");

                    b.HasKey("Id")
                        .HasName("pk_specification");

                    b.ToTable("specification", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationOption", b =>
                {
                    b.Property<Guid>("SpecificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specification_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("SpecificationId", "Value")
                        .HasName("pk_specification_option");

                    b.ToTable("specification_option", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("LangCode")
                        .HasColumnType("integer")
                        .HasColumnName("lang_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("SpecId")
                        .HasColumnType("uuid")
                        .HasColumnName("spec_id");

                    b.HasKey("Id")
                        .HasName("pk_specification_translation");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_specification_translation_name");

                    b.HasIndex("SpecId", "LangCode")
                        .IsUnique()
                        .HasDatabaseName("ix_specification_translation_spec_id_lang_code");

                    b.ToTable("specification_translation", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("ShipingZoneName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shiping_zone_name");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vendor_name");

                    b.HasKey("Id")
                        .HasName("pk_vendor");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_vendor_email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_vendor_phone_number");

                    b.HasIndex("VendorName")
                        .HasDatabaseName("ix_vendor_vendor_name");

                    b.ToTable("vendor", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Views.CategoryStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<Guid>>("ChildCategoryIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("child_category_ids");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_category_id");

                    b.Property<int>("TotalChildren")
                        .HasColumnType("integer")
                        .HasColumnName("total_children");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("integer")
                        .HasColumnName("total_products");

                    b.Property<int>("TotalSpecs")
                        .HasColumnType("integer")
                        .HasColumnName("total_specs");

                    b.HasKey("Id")
                        .HasName("pk_category_statistics");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_category_statistics_created_on");

                    b.ToTable("category_statistics", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Views.SpecificationStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("integer")
                        .HasColumnName("total_products");

                    b.HasKey("Id", "Value")
                        .HasName("pk_specification_statistics");

                    b.HasIndex("CreatedOnUtc")
                        .HasDatabaseName("ix_specification_statistics_created_on_utc");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_specification_statistics_id");

                    b.HasIndex("TotalProducts")
                        .HasDatabaseName("ix_specification_statistics_total_products");

                    b.HasIndex("Value")
                        .HasDatabaseName("ix_specification_statistics_value");

                    b.ToTable("specification_statistics", "orders");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.BrandTranslation", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Brand", "Brand")
                        .WithMany("BrandTranslations")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brand_translation_brand_brand_id");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Category", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Category", "ParentCategory")
                        .WithMany("ChilrenCategories")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("fk_category_category_parent_category_id");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategorySpec", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Category", "Category")
                        .WithMany("CategorySpecs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_spec_category_category_id");

                    b.HasOne("Modules.Orders.Domain.Entities.Specification", "Specification")
                        .WithMany("CategorySpecs")
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_spec_specification_spec_id");

                    b.Navigation("Category");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_translation_category_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Product", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_brand_brand_id");

                    b.HasOne("Modules.Orders.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_category_category_id");

                    b.HasOne("Modules.Orders.Domain.Entities.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_vendor_vendor_id");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptionColor", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Color", "Color")
                        .WithMany("ProductItemOptionColors")
                        .HasForeignKey("ColorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_option_color_color_color_code");

                    b.HasOne("Modules.Orders.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("ProductItemOptionColors")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_option_color_product_item_product_item_id");

                    b.HasOne("Modules.Orders.Domain.Entities.Specification", "Specification")
                        .WithMany("ProductItemOptionColors")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_option_color_specification_specification_id");

                    b.Navigation("Color");

                    b.Navigation("ProductItem");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptionNumeric", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("ProductItemOptionNumerics")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_option_numeric_product_item_product_item_id");

                    b.HasOne("Modules.Orders.Domain.Entities.Specification", "Specification")
                        .WithMany("ProductItemOptionNumerics")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_option_numeric_specification_specification_id");

                    b.Navigation("ProductItem");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItemOptions", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("ProductItemOptions")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_options_product_item_product_item_id");

                    b.HasOne("Modules.Orders.Domain.Entities.SpecificationOption", "SpecificationOptions")
                        .WithMany("ProductItemOptions")
                        .HasForeignKey("SpecificationId", "Value")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_item_options_specification_option_specification_id_");

                    b.Navigation("ProductItem");

                    b.Navigation("SpecificationOptions");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductTranslation", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_translation_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationOption", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Specification", "Specification")
                        .WithMany("SpecificationOptions")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specification_option_specification_specification_id");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationTranslation", b =>
                {
                    b.HasOne("Modules.Orders.Domain.Entities.Specification", "specification")
                        .WithMany("Translations")
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specification_translation_specification_spec_id");

                    b.Navigation("specification");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Brand", b =>
                {
                    b.Navigation("BrandTranslations");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Category", b =>
                {
                    b.Navigation("CategorySpecs");

                    b.Navigation("CategoryTranslations");

                    b.Navigation("ChilrenCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Color", b =>
                {
                    b.Navigation("ProductItemOptionColors");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductItems");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.ProductItem", b =>
                {
                    b.Navigation("ProductItemOptionColors");

                    b.Navigation("ProductItemOptionNumerics");

                    b.Navigation("ProductItemOptions");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Specification", b =>
                {
                    b.Navigation("CategorySpecs");

                    b.Navigation("ProductItemOptionColors");

                    b.Navigation("ProductItemOptionNumerics");

                    b.Navigation("SpecificationOptions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.SpecificationOption", b =>
                {
                    b.Navigation("ProductItemOptions");
                });

            modelBuilder.Entity("Modules.Orders.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}

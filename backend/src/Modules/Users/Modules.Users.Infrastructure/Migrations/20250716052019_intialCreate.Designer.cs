// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modules.Users.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Modules.Users.Infrastructure.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20250716052019_intialCreate")]
    partial class intialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("users")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Infrastructure.Inbox.InboxConsumerMessage", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HandlerName")
                        .HasColumnType("text")
                        .HasColumnName("handler_name");

                    b.HasKey("id", "HandlerName")
                        .HasName("pk_inbox_consumer_message");

                    b.ToTable("inbox_consumer_message", "users");
                });

            modelBuilder.Entity("Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "users");
                });

            modelBuilder.Entity("Common.Infrastructure.Outbox.OutboxConsumerMessage", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HandlerName")
                        .HasColumnType("text")
                        .HasColumnName("handler_name");

                    b.HasKey("id", "HandlerName")
                        .HasName("pk_outbox_consumer_message");

                    b.ToTable("outbox_consumer_message", "users");
                });

            modelBuilder.Entity("Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "users");
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.Permission", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Module")
                        .HasColumnType("text")
                        .HasColumnName("module");

                    b.HasKey("Name")
                        .HasName("pk_permission");

                    b.ToTable("permission", "users");

                    b.HasData(
                        new
                        {
                            Name = "user:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "users"
                        },
                        new
                        {
                            Name = "user:role:update",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "users"
                        },
                        new
                        {
                            Name = "role:read",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "users"
                        },
                        new
                        {
                            Name = "role:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "users"
                        },
                        new
                        {
                            Name = "role:permission:update",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "users"
                        },
                        new
                        {
                            Name = "permission:read",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "users"
                        },
                        new
                        {
                            Name = "permission:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "users"
                        },
                        new
                        {
                            Name = "permission:update",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "users"
                        },
                        new
                        {
                            Name = "auth:login",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "users"
                        },
                        new
                        {
                            Name = "banner:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "banner:read",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "banner:delete",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "brand:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "brand:read",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "brand:update",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "category:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "category:update",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "category:read",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "category:delete",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "color:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "color:read",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "product:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "product:item:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "product:item:read",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "product:item:delete",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "spec:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "spec:read",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "spec:update",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "vendor:create",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "vendor:update",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        },
                        new
                        {
                            Name = "vendor:read",
                            Active = true,
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Module = "orders"
                        });
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.HasKey("Name")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", "users");

                    b.HasData(
                        new
                        {
                            Name = "guest",
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Name = "admin",
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Name = "default",
                            CreatedOnUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role_id");

                    b.Property<string>("PermissionId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permission_permission_id");

                    b.ToTable("role_permission", "users");

                    b.HasData(
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "banner:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "banner:read"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "banner:delete"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "brand:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "brand:read"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "brand:update"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "category:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "category:update"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "category:read"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "category:delete"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "color:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "color:read"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "product:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "product:item:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "product:item:read"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "product:item:delete"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "spec:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "spec:read"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "spec:update"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "vendor:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "vendor:update"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "vendor:read"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "role:read"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "role:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "role:permission:update"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "user:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "user:role:update"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "permission:read"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "permission:create"
                        },
                        new
                        {
                            RoleId = "admin",
                            PermissionId = "permission:update"
                        },
                        new
                        {
                            RoleId = "default",
                            PermissionId = "banner:read"
                        },
                        new
                        {
                            RoleId = "default",
                            PermissionId = "brand:read"
                        },
                        new
                        {
                            RoleId = "default",
                            PermissionId = "category:read"
                        },
                        new
                        {
                            RoleId = "default",
                            PermissionId = "color:read"
                        },
                        new
                        {
                            RoleId = "default",
                            PermissionId = "product:item:read"
                        },
                        new
                        {
                            RoleId = "default",
                            PermissionId = "spec:read"
                        },
                        new
                        {
                            RoleId = "default",
                            PermissionId = "vendor:read"
                        },
                        new
                        {
                            RoleId = "guest",
                            PermissionId = "banner:read"
                        },
                        new
                        {
                            RoleId = "guest",
                            PermissionId = "brand:read"
                        },
                        new
                        {
                            RoleId = "guest",
                            PermissionId = "category:read"
                        },
                        new
                        {
                            RoleId = "guest",
                            PermissionId = "product:item:read"
                        },
                        new
                        {
                            RoleId = "guest",
                            PermissionId = "user:create"
                        },
                        new
                        {
                            RoleId = "guest",
                            PermissionId = "auth:login"
                        });
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpireDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_date_utc");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer")
                        .HasColumnName("token_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_token_user_id");

                    b.HasIndex("Value", "TokenType")
                        .IsUnique()
                        .HasDatabaseName("ix_token_value_token_type");

                    b.ToTable("token", "users");
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_creation");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            DateOfCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            PasswordHash = "AQAAAAIAAYagAAAAEJOqYyDPiMJFm1mVQx3qEAyLF9qqYyRZQamJuHF11binnXBQGuCSBJu+8T4lDkxPxg=="
                        });
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId")
                        .HasName("pk_user_role");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_role_user_id");

                    b.ToTable("user_role", "users");

                    b.HasData(
                        new
                        {
                            RoleId = "admin",
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Modules.Users.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_permission_permission_id");

                    b.HasOne("Modules.Users.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Modules.Users.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_roles_role_id");

                    b.HasOne("Modules.Users.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Modules.Users.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
